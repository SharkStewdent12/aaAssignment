import javax.swing.JOptionPane;


public class Strategy {
	Hand hand = new Hand();
	Flop flop = new Flop();
	public Hand getHand() {
		return hand;
	}
	public void setHand(Hand hand) {
		this.hand = hand;
	}
	public Flop getFlop() {
		return flop;
	}
	public void setFlop(Flop flop) {
		this.flop = flop;
	}
	public Strategy(Hand hand, Flop flop) {
		super();
		this.hand = hand;
		this.flop = flop;
	}
	public static int makeMove(int tag,Hand hand1, Flop flop2, int action2) {
		int action1=0;
		//basic strategy(control)
		if(tag==0){
			action1=0;
		}
		//for testing purposes
//		if(tag==1){
//			action1.setBet(JOptionPane.showInputDialog("enter bet"));
//			action1.setValue(Integer.parseInt(JOptionPane.showInputDialog("enter value")));
//		}
		//bet 1
		if(tag==1){
			action1=1;
		}
		// mock game
		if (tag==2){
			int draw=0;
			Card[]deck=new Card[52];
			for (int i = 0; i < 4; i++) {
				for (int j = 1; j < 14; j++) {
					deck[i*13+j-1]=new Card(i, j);
				}
			}
			int mark=3;
			Flop sub=new Flop();
			Hand hand2=new Hand();
			deck[hand1.getCards()[0].getSuit()*13+hand1.getCards()[0].getValue()-1]=null;
			deck[hand1.getCards()[1].getSuit()*13+hand1.getCards()[1].getValue()-1]=null;
			deck[flop2.getCards()[0].getSuit()*13+flop2.getCards()[0].getValue()-1]=null;
			sub.addCard(flop2.getCards()[0]);
			deck[flop2.getCards()[1].getSuit()*13+flop2.getCards()[1].getValue()-1]=null;
			sub.addCard(flop2.getCards()[1]);
			deck[flop2.getCards()[2].getSuit()*13+flop2.getCards()[2].getValue()-1]=null;
			sub.addCard(flop2.getCards()[2]);
			if(flop2.getCards()[3]!=null){
				deck[flop2.getCards()[3].getSuit()*13+flop2.getCards()[3].getValue()-1]=null;
				sub.addCard(flop2.getCards()[3]);
				mark=4;
			}
			else{
				draw=(int) (Math.random()*52);
				while(deck[draw]==null){
					draw=(int) (Math.random()*52);
				}
				sub.addCard(deck[draw]);
				deck[draw]=null;
			}
			if(flop2.getCards()[4]!=null){
				deck[flop2.getCards()[4].getSuit()*13+flop2.getCards()[4].getValue()-1]=null;
				sub.addCard(flop2.getCards()[0]);
				mark=5;
			}else{
				draw=(int) (Math.random()*52);
				while(deck[draw]==null){
					draw=(int) (Math.random()*52);
				}
				sub.addCard(deck[draw]);
				deck[draw]=null;
			}

			Card[]tempCards=new Card[2];
			for (int i = 0; i < 2; i++) {
				draw=(int) (Math.random()*52);
				while(deck[draw]==null){
					draw=(int) (Math.random()*52);
				}
				tempCards[i]=deck[draw];
				deck[draw]=null;
			}
			hand2.setCards(tempCards);
			Hand winner=Main.calculateWinner(hand1,hand2,sub);
			switch(mark){
			case 3:
				if(winner.equals(hand1)){
					//bet high
				}
				if(winner.equals(hand2)){
					//safe/fold
				}
				if(winner==null){
					//play safe
				}
			case 4:
				if(winner.equals(hand1)){
					//bet high
				}
				if(winner.equals(hand2)){
					//safe/fold
				}
				if(winner==null){
					//play safe
				}
			case 5:
				if(winner.equals(hand1)){
					//bet high
				}
				if(winner.equals(hand2)){
					//safe/fold
				}
				if(winner==null){
					//play safe
				}
			}
		}
		
		return action1;
	}

}
